from django.contrib import admin
from django.utils.html import format_html
from django.utils import timezone
from django.urls import reverse
from django.db.models import Sum, Count, F, Q
from datetime import timedelta

from .models import Tree


@admin.register(Tree)
class TreeAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Tree
    """
    list_display = ('id', 'user_link', 'tree_type', 'tree_level', 'income_per_hour_display', 
                   'branches_collected_display', 'watering_status', 'fertilizer_status', 'created_at')
    list_filter = ('type', 'level', 'created_at')
    search_fields = ('user__username', 'user__telegram_id')
    readonly_fields = ('created_at', 'last_watered', 'fertilized_until', 'tree_visualization')
    list_per_page = 20
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–µ–≤–µ', {
            'fields': ('user', 'type', 'level', 'tree_visualization')
        }),
        ('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', {
            'fields': ('income_per_hour', 'branches_collected')
        }),
        ('–°—Ç–∞—Ç—É—Å—ã', {
            'fields': ('last_watered', 'fertilized_until')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at',)
        }),
    )
    
    actions = ['water_trees', 'fertilize_trees', 'level_up_trees', 'reset_branches']
    
    def user_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = reverse("admin:users_user_change", args=[obj.user.telegram_id])
        return format_html('<a href="{}" style="color: #3a1a78; font-weight: bold;">{}</a>',
                         url, obj.user)
    
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user_link.admin_order_field = 'user__username'
    
    def tree_type(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ä–µ–≤–∞ —Å —Ü–≤–µ—Ç–æ–º"""
        colors = {
            'CF': '#f9ca24',
            'TON': '#0f7fd8',
            'NOT': '#9c88ff'
        }
        return format_html('<span style="background-color: {}; color: white; padding: 3px 8px; border-radius: 10px;">{}</span>',
                         colors.get(obj.type, '#6c757d'), obj.get_type_display())
    
    tree_type.short_description = '–¢–∏–ø'
    tree_type.admin_order_field = 'type'
    
    def tree_level(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤–∞"""
        level_colors = {
            1: '#28a745',  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            2: '#17a2b8',  # –ì–æ–ª—É–±–æ–π
            3: '#0f7fd8',  # –°–∏–Ω–∏–π
            4: '#9c88ff',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            5: '#f9ca24',  # –ñ–µ–ª—Ç—ã–π
        }
        color = level_colors.get(obj.level, '#dc3545')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        
        stars = '‚òÖ' * obj.level
        return format_html('<span style="color: {}; font-weight: bold;">Lvl {} {}</span>',
                         color, obj.level, stars)
    
    tree_level.short_description = '–£—Ä–æ–≤–µ–Ω—å'
    tree_level.admin_order_field = 'level'
    
    def income_per_hour_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å"""
        return format_html('<span style="color: #28a745; font-weight: bold;">+{}/—á–∞—Å</span>', obj.income_per_hour)
    
    income_per_hour_display.short_description = '–î–æ—Ö–æ–¥'
    income_per_hour_display.admin_order_field = 'income_per_hour'
    
    def branches_collected_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫"""
        if obj.branches_collected > 0:
            return format_html('<span style="color: #f9ca24; font-weight: bold;">{}</span>', obj.branches_collected)
        return format_html('<span style="color: #6c757d;">0</span>')
    
    branches_collected_display.short_description = '–í–µ—Ç–∫–∏'
    branches_collected_display.admin_order_field = 'branches_collected'
    
    def watering_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞"""
        if not obj.last_watered:
            return format_html('<span style="color: #dc3545;"><i class="fas fa-tint-slash"></i> –ù–µ –ø–æ–ª–∏—Ç–æ</span>')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–∏—Ç–æ –ª–∏ –¥–µ—Ä–µ–≤–æ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª–∏–≤ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 —á–∞—Å–æ–≤)
        now = timezone.now()
        watering_duration = 5  # —á–∞—Å–æ–≤
        watering_expires = obj.last_watered + timedelta(hours=watering_duration)
        
        if now < watering_expires:
            hours_left = int((watering_expires - now).total_seconds() / 3600)
            minutes_left = int(((watering_expires - now).total_seconds() % 3600) / 60)
            
            return format_html('<span style="color: #28a745;"><i class="fas fa-tint"></i> –ü–æ–ª–∏—Ç–æ</span> '
                             '<small>(–µ—â–µ {}—á {}–º–∏–Ω)</small>', hours_left, minutes_left)
        
        time_since = now - obj.last_watered
        hours_ago = int(time_since.total_seconds() / 3600)
        
        return format_html('<span style="color: #ffc107;"><i class="fas fa-tint-slash"></i> –ù–µ –ø–æ–ª–∏—Ç–æ</span> '
                         '<small>({}—á –Ω–∞–∑–∞–¥)</small>', hours_ago)
    
    watering_status.short_description = '–ü–æ–ª–∏–≤'
    
    def fertilizer_status(self, obj):
        """–°—Ç–∞—Ç—É—Å —É–¥–æ–±—Ä–µ–Ω–∏—è"""
        if not obj.fertilized_until:
            return format_html('<span style="color: #dc3545;"><i class="fas fa-seedling"></i> –ù–µ —É–¥–æ–±—Ä–µ–Ω–æ</span>')
        
        now = timezone.now()
        
        if now < obj.fertilized_until:
            days_left = (obj.fertilized_until - now).days
            hours_left = int(((obj.fertilized_until - now).total_seconds() % (24 * 3600)) / 3600)
            
            return format_html('<span style="color: #28a745;"><i class="fas fa-seedling"></i> –£–¥–æ–±—Ä–µ–Ω–æ</span> '
                             '<small>(–µ—â–µ {}–¥ {}—á)</small>', days_left, hours_left)
        
        time_since = now - obj.fertilized_until
        days_ago = time_since.days
        
        return format_html('<span style="color: #ffc107;"><i class="fas fa-seedling"></i> –ù–µ —É–¥–æ–±—Ä–µ–Ω–æ</span> '
                         '<small>(–∏—Å—Ç–µ–∫–ª–æ {}–¥ –Ω–∞–∑–∞–¥)</small>', days_ago)
    
    fertilizer_status.short_description = '–£–¥–æ–±—Ä–µ–Ω–∏–µ'
    
    def tree_visualization(self, obj):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞"""
        tree_colors = {
            'CF': ('–ñ–µ–ª—Ç—ã–π', '#f9ca24'),
            'TON': ('–°–∏–Ω–∏–π', '#0f7fd8'),
            'NOT': ('–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', '#9c88ff')
        }
        
        tree_color_name, tree_color_hex = tree_colors.get(obj.type, ('–ó–µ–ª–µ–Ω—ã–π', '#28a745'))
        
        # –≠–º–æ–¥–∑–∏ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        tree_emoji = {
            1: 'üå±',  # –†–æ—Å—Ç–æ–∫
            2: 'üåø',  # –ú–æ–ª–æ–¥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
            3: 'üå≤',  # –ú–æ–ª–æ–¥–æ–µ –¥–µ—Ä–µ–≤–æ
            4: 'üå≥',  # –í–∑—Ä–æ—Å–ª–æ–µ –¥–µ—Ä–µ–≤–æ
            5: 'üå¥',  # –ë–æ–ª—å—à–æ–µ –¥–µ—Ä–µ–≤–æ
        }
        
        emoji = tree_emoji.get(obj.level, 'üå≥')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ASCII-–∞—Ä—Ç –¥–µ—Ä–µ–≤–æ
        tree_art = [
            '    *    ',
            '   ***   ',
            '  *****  ',
            ' ******* ',
            '    |    ',
            '    |    ',
            '~~~~~~~~~'
        ]
        
        return format_html(
            '<div style="background-color: #f5f5f5; padding: 15px; border-radius: 10px; margin-top: 10px;">'
            '<div style="font-size: 50px; text-align: center;">{}</div>'
            '<div style="margin-top: 10px; text-align: center;">'
            '<pre style="color: {}; font-weight: bold;">{}</pre>'
            '</div>'
            '<div style="margin-top: 10px;">'
            '<strong>–¢–∏–ø:</strong> {} ({})<br>'
            '<strong>–£—Ä–æ–≤–µ–Ω—å:</strong> {}<br>'
            '<strong>–î–æ—Ö–æ–¥:</strong> {} –≤ —á–∞—Å<br>'
            '<strong>–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤–µ—Ç–æ–∫:</strong> {}<br>'
            '</div>'
            '</div>',
            emoji,
            tree_color_hex, '\n'.join(tree_art),
            obj.get_type_display(), tree_color_name,
            obj.level,
            obj.income_per_hour,
            obj.branches_collected
        )
    
    tree_visualization.short_description = '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞'
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return super().get_queryset(request).select_related('user')
    
    def water_trees(self, request, queryset):
        """–ü–æ–ª–∏–≤ –¥–µ—Ä–µ–≤—å–µ–≤"""
        now = timezone.now()
        count = queryset.count()
        
        queryset.update(last_watered=now)
        
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏—Ç–æ {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    
    water_trees.short_description = "–ü–æ–ª–∏—Ç—å –¥–µ—Ä–µ–≤—å—è"
    
    def fertilize_trees(self, request, queryset):
        """–£–¥–æ–±—Ä–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤"""
        from django.contrib.admin.helpers import ActionForm
        from django import forms
        
        class FertilizerForm(ActionForm):
            days = forms.IntegerField(label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π', initial=1)
        
        self.action_form = FertilizerForm
        days = request.POST.get('days')
        
        if 'apply' in request.POST and days:
            days = int(days)
            now = timezone.now()
            count = queryset.count()
            
            queryset.update(fertilized_until=now + timedelta(days=days))
            
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ —É–¥–æ–±—Ä–µ–Ω–æ {count} –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ {days} –¥–Ω–µ–π.')
    
    fertilize_trees.short_description = "–£–¥–æ–±—Ä–∏—Ç—å –¥–µ—Ä–µ–≤—å—è"
    
    def level_up_trees(self, request, queryset):
        """–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤—å–µ–≤"""
        count = queryset.count()
        
        for tree in queryset:
            tree.level += 1
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
            tree.income_per_hour = tree.income_per_hour * 1.5
            tree.save()
        
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–ª—è {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    
    level_up_trees.short_description = "–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"
    
    def reset_branches(self, request, queryset):
        """–°–±—Ä–æ—Å —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫"""
        count = queryset.count()
        
        queryset.update(branches_collected=0)
        
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–æ–∫ –¥–ª—è {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    
    reset_branches.short_description = "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Ç–∫–∏"
    
    class Media:
        css = {
            'all': ('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',)
        }
