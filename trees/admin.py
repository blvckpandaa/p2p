from decimal import Decimal
from django.contrib import admin
from django.utils.html import format_html
from django.utils import timezone
from django.urls import reverse
from datetime import timedelta

from users.models import User
from .models import Tree, TonDistribution


@admin.register(Tree)
class TreeAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–∏ Tree.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ CF –∏ TON-–¥–µ—Ä–µ–≤—å—è (NOT —É–¥–∞–ª—ë–Ω).
    """
    list_display = (
        'id',
        'user_link',
        'tree_type',
        'tree_level',
        'income_per_hour_display',
        'branches_collected_display',
        'watering_status',
        'fertilizer_status',
        'created_at'
    )
    list_filter = ('type', 'level', 'created_at')
    search_fields = ('user__username', 'user__telegram_id')
    readonly_fields = ('created_at', 'last_watered', 'fertilized_until', 'tree_visualization')
    list_per_page = 20
    date_hierarchy = 'created_at'

    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ä–µ–≤–µ', {
            'fields': ('user', 'type', 'level', 'tree_visualization')
        }),
        ('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', {
            'fields': ('income_per_hour', 'branches_collected')
        }),
        ('–°—Ç–∞—Ç—É—Å—ã', {
            'fields': ('last_watered', 'fertilized_until')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at',)
        }),
    )

    actions = ['water_trees', 'fertilize_trees', 'level_up_trees', 'reset_branches']

    def user_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ."""
        url = reverse("admin:users_user_change", args=[obj.user.telegram_id])
        return format_html(
            '<a href="{}" style="color: #3a1a78; font-weight: bold;">{}</a>',
            url,
            obj.user
        )
    user_link.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    user_link.admin_order_field = 'user__username'

    def tree_type(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ä–µ–≤–∞ (¬´CF¬ª –∂—ë–ª—Ç—ã–π, ¬´TON¬ª —Å–∏–Ω–∏–π).
        NOT-–¥–µ—Ä–µ–≤—å—è –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç.
        """
        colors = {
            'CF':  '#f9ca24',
            'TON': '#0f7fd8',
        }
        display = obj.get_type_display()
        color = colors.get(obj.type, '#6c757d')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; border-radius: 10px;">{}</span>',
            color, display
        )
    tree_type.short_description = '–¢–∏–ø'
    tree_type.admin_order_field = 'type'

    def tree_level(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤–∞ (1‚Äì5) —Å —Ü–≤–µ—Ç–æ–º –∏ –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏."""
        level_colors = {
            1: '#28a745',  # –ó–µ–ª–µ–Ω—ã–π
            2: '#17a2b8',  # –ì–æ–ª—É–±–æ–π
            3: '#0f7fd8',  # –°–∏–Ω–∏–π
            4: '#9c88ff',  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            5: '#f9ca24',  # –ñ–µ–ª—Ç—ã–π
        }
        color = level_colors.get(obj.level, '#dc3545')
        stars = '‚òÖ' * obj.level
        return format_html(
            '<span style="color: {}; font-weight: bold;">Lvl {} {}</span>',
            color, obj.level, stars
        )
    tree_level.short_description = '–£—Ä–æ–≤–µ–Ω—å'
    tree_level.admin_order_field = 'level'

    def income_per_hour_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –≤ —á–∞—Å."""
        return format_html(
            '<span style="color: #28a745; font-weight: bold;">+{:.2f}/—á–∞—Å</span>',
            obj.income_per_hour
        )
    income_per_hour_display.short_description = '–î–æ—Ö–æ–¥'
    income_per_hour_display.admin_order_field = 'income_per_hour'

    def branches_collected_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ç–æ–∫."""
        if obj.branches_collected > 0:
            return format_html(
                '<span style="color: #f9ca24; font-weight: bold;">{}</span>',
                obj.branches_collected
            )
        return format_html('<span style="color: #6c757d;">0</span>')
    branches_collected_display.short_description = '–í–µ—Ç–∫–∏'
    branches_collected_display.admin_order_field = 'branches_collected'

    def watering_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –ø–æ–ª–∏–≤–∞ (5 —á–∞—Å–æ–≤ –¥–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä)."""
        if not obj.last_watered:
            return format_html(
                '<span style="color: #dc3545;"><i class="fas fa-tint-slash"></i> –ù–µ –ø–æ–ª–∏—Ç–æ</span>'
            )

        now = timezone.now()
        watering_duration = 5  # —á–∞—Å–æ–≤
        expires = obj.last_watered + timedelta(hours=watering_duration)

        if now < expires:
            seconds_left = (expires - now).total_seconds()
            hours_left = int(seconds_left // 3600)
            minutes_left = int((seconds_left % 3600) // 60)
            return format_html(
                '<span style="color: #28a745;"><i class="fas fa-tint"></i> –ü–æ–ª–∏—Ç–æ</span> '
                '<small>({}—á {}–º–∏–Ω)</small>',
                hours_left, minutes_left
            )

        diff = now - obj.last_watered
        hours_ago = int(diff.total_seconds() // 3600)
        return format_html(
            '<span style="color: #ffc107;"><i class="fas fa-tint-slash"></i> –ù–µ –ø–æ–ª–∏—Ç–æ</span> '
            '<small>({}—á –Ω–∞–∑–∞–¥)</small>',
            hours_ago
        )
    watering_status.short_description = '–ü–æ–ª–∏–≤'

    def fertilizer_status(self, obj):
        """–°—Ç–∞—Ç—É—Å —É–¥–æ–±—Ä–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ fertilized_until)."""
        if not obj.fertilized_until:
            return format_html(
                '<span style="color: #dc3545;"><i class="fas fa-seedling"></i> –ù–µ —É–¥–æ–±—Ä–µ–Ω–æ</span>'
            )

        now = timezone.now()
        if now < obj.fertilized_until:
            diff = obj.fertilized_until - now
            days_left = diff.days
            hours_left = int((diff.total_seconds() % 86400) // 3600)
            return format_html(
                '<span style="color: #28a745;"><i class="fas fa-seedling"></i> –£–¥–æ–±—Ä–µ–Ω–æ</span> '
                '<small>({}–¥ {}—á)</small>',
                days_left, hours_left
            )

        diff = now - obj.fertilized_until
        days_ago = diff.days
        return format_html(
            '<span style="color: #ffc107;"><i class="fas fa-seedling"></i> –ù–µ —É–¥–æ–±—Ä–µ–Ω–æ</span> '
            '<small>(–∏—Å—Ç–µ–∫–ª–æ {}–¥ –Ω–∞–∑–∞–¥)</small>',
            days_ago
        )
    fertilizer_status.short_description = '–£–¥–æ–±—Ä–µ–Ω–∏–µ'

    def tree_visualization(self, obj):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞:
        - –≠–º–æ–¥–∑–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è (1‚Äì5).
        - ASCII-–∞—Ä—Ç.
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ, —É—Ä–æ–≤–Ω–µ, –¥–æ—Ö–æ–¥–µ, –≤–µ—Ç–∫–∞—Ö.
        """
        tree_colors = {
            'CF':  ('–ñ–µ–ª—Ç—ã–π', '#f9ca24'),
            'TON': ('–°–∏–Ω–∏–π',  '#0f7fd8'),
        }
        tree_color_name, tree_color_hex = tree_colors.get(obj.type, ('–°–µ—Ä—ã–π', '#6c757d'))

        tree_emoji = {
            1: 'üå±',
            2: 'üåø',
            3: 'üå≤',
            4: 'üå≥',
            5: 'üå¥',
        }
        emoji = tree_emoji.get(obj.level, 'üå≥')

        tree_art = [
            '    *    ',
            '   ***   ',
            '  *****  ',
            ' ******* ',
            '    |    ',
            '    |    ',
            '~~~~~~~~~'
        ]
        art_html = '<br>'.join(tree_art)

        return format_html(
            '<div style="background-color: #f5f5f5; padding: 15px; border-radius: 10px; margin-top: 10px;">'
            '  <div style="font-size: 50px; text-align: center;">{}</div>'
            '  <div style="margin-top: 10px; text-align: center;">'
            '    <pre style="color: {}; font-family: monospace; font-weight: bold;">{}</pre>'
            '  </div>'
            '  <div style="margin-top: 10px;">'
            '    <strong>–¢–∏–ø:</strong> {} ({})<br>'
            '    <strong>–£—Ä–æ–≤–µ–Ω—å:</strong> {}<br>'
            '    <strong>–î–æ—Ö–æ–¥:</strong> {} –≤ —á–∞—Å<br>'
            '    <strong>–í–µ—Ç–∫–∏:</strong> {}<br>'
            '  </div>'
            '</div>',
            emoji,
            tree_color_hex,
            art_html,
            obj.get_type_display(), tree_color_name,
            obj.level,
            obj.income_per_hour,
            obj.branches_collected
        )
    tree_visualization.short_description = '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞'

    def get_queryset(self, request):
        return super().get_queryset(request).select_related('user')

    def water_trees(self, request, queryset):
        """–ú–∞—Å—Å–æ–≤—ã–π –ø–æ–ª–∏–≤: last_watered = now –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤."""
        now = timezone.now()
        count = queryset.count()
        queryset.update(last_watered=now)
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª–∏—Ç–æ {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    water_trees.short_description = "–ü–æ–ª–∏—Ç—å –¥–µ—Ä–µ–≤—å—è"

    def fertilize_trees(self, request, queryset):
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–æ–±—Ä–µ–Ω–∏–µ: –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å fertilized_until.
        """
        from django.contrib.admin.helpers import ActionForm
        from django import forms

        class FertilizerForm(ActionForm):
            days = forms.IntegerField(label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π', initial=1)

        self.action_form = FertilizerForm
        days = request.POST.get('days')
        if 'apply' in request.POST and days:
            days = int(days)
            now = timezone.now()
            count = queryset.count()
            queryset.update(fertilized_until=now + timedelta(days=days))
            self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ —É–¥–æ–±—Ä–µ–Ω–æ {count} –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–∞ {days} –¥–Ω–µ–π.')
    fertilize_trees.short_description = "–£–¥–æ–±—Ä–∏—Ç—å –¥–µ—Ä–µ–≤—å—è"

    def level_up_trees(self, request, queryset):
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ä–µ–≤—å–µ–≤ (+1 —É—Ä–æ–≤–µ–Ω—å, –¥–æ—Ö–æ–¥ * 1.5).
        """
        count = queryset.count()
        for tree in queryset:
            tree.level += 1
            tree.income_per_hour = (tree.income_per_hour * Decimal('1.5')).quantize(Decimal('0.00000001'))
            tree.save(update_fields=['level', 'income_per_hour'])
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–ª—è {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    level_up_trees.short_description = "–ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"

    def reset_branches(self, request, queryset):
        """–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–æ–∫ (branches_collected = 0)."""
        count = queryset.count()
        queryset.update(branches_collected=0)
        self.message_user(request, f'–£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–æ–∫ –¥–ª—è {count} –¥–µ—Ä–µ–≤—å–µ–≤.')
    reset_branches.short_description = "–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Ç–∫–∏"

    class Media:
        css = {
            'all': ('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',)
        }


@admin.register(TonDistribution)
class TonDistributionAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è TonDistribution.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–∞—á—É TON –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—ë —ç–∫—à–µ–Ω–æ–º.
    """
    list_display = ('id', 'total_amount', 'duration_hours', 'is_active', 'created_at', 'per_user_display')
    list_filter = ('is_active', 'created_at')
    readonly_fields = ('created_at',)
    actions = ['run_distribution']

    def per_user_display(self, obj):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±—ã –ø–æ–ª—É—á–∏–ª –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
        –µ—Å–ª–∏ —ç–∫—à–µ–Ω ¬´–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑–¥–∞—á—É TON¬ª –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.
        """
        users_count = User.objects.filter(trees__type='TON').distinct().count()
        if users_count == 0:
            return format_html('<span style="color: #dc3545;">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TON-–¥–µ—Ä–µ–≤–æ–º</span>')
        amount_each = (obj.total_amount / Decimal(users_count)).quantize(Decimal('0.00000001'))
        return f"{amount_each} TON"
    per_user_display.short_description = "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏—Ç –∫–∞–∂–¥—ã–π?"

    def run_distribution(self, request, queryset):
        """
        –ê–¥–º–∏–Ω-—ç–∫—à–µ–Ω: –≤—ã–∑—ã–≤–∞–µ—Ç .distribute() –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–º–µ—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏,
        –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞ (is_active=True).
        """
        for dist in queryset.filter(is_active=True):
            per_user = dist.distribute()
            self.message_user(
                request,
                f"–†–∞–∑–¥–∞—á–∞ #{dist.id} ({dist.total_amount} TON) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. "
                f"–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å TON-–¥–µ—Ä–µ–≤–æ–º –ø–æ–ª—É—á–∏–ª –ø–æ {per_user:.8f} TON."
            )
        already_done = queryset.filter(is_active=False)
        for dist in already_done:
            self.message_user(request, f"–†–∞–∑–¥–∞—á–∞ #{dist.id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ.", level='warning')
    run_distribution.short_description = "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ TON"
